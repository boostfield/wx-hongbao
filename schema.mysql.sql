DROP TABLE IF EXISTS event;
DROP TABLE IF EXISTS share;
DROP TABLE IF EXISTS sys_pay;
DROP TABLE IF EXISTS user_pay;
DROP TABLE IF EXISTS login;
DROP TABLE IF EXISTS user;

CREATE TABLE user(
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    openid CHAR(28) NOT NULL UNIQUE,
	agent INTEGER NULL,
	share_qrcode TEXT NULL,
    register_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY(agent) REFERENCES user(id)
);

CREATE TABLE login(
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    openid CHAR(28) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE user_pay(
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    openid CHAR(28) NOT NULL,
    money INT NOT NULL,
    trade_no CHAR(17) NOT NULL,
    ip VARCHAR(15) NOT NULL,
    state VARCHAR(8) NOT NULL,	-- FAIL/PREPAY/SUCCESS
	prepay_id CHAR(36),
    error_msg TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);
CREATE INDEX idx_user_pay_openid ON user_pay(openid);
CREATE INDEX idx_user_pay_trade_no ON user_pay(trade_no);

CREATE TABLE sys_pay(
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    openid CHAR(28) NOT NULL,
	money INT NOT NULL,
	billno CHAR(28) NOT NULL,
	user_pay_id INTEGER NULL,
	state VARCHAR(8) NOT NULL,
	type VARCHAR(8) NOT NULL,
	wx_billno CHAR(32),
	error_msg TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY(user_pay_id) REFERENCES user_pay(id)
);

CREATE TABLE share(
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
	user_pay_id INT NOT NULL,	
	sys_pay_id INT NOT NULL,	-- 此次分红被合并到哪个系统支付中一并发送
	money INT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY(user_pay_id) REFERENCES user_pay(id),
	FOREIGN KEY(sys_pay_id) REFERENCES sys_pay(id)
);

CREATE TABLE event(
    id INTEGER PRIMARY KEY AUTO_INCREMENT,
    openid CHAR(28) NOT NULL,
	type TEXT NOT NULL,
	info TEXT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);
